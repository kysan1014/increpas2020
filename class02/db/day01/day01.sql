-- # day01 - 08-21
/*
    sqldeveloper 는 자바로 만든 프로그램이다.
    따라서 자바주석처리가 가능하다.
    
    sql 문서는 dbms에게 요청하는 명령을 모아놓은 문서인데
    이때 이 문서의 내용은 sql 명령으로 만들어져야 한다.
    따라서 자바언어의 문법은 인식을 못할 것이다.
    우리가 사용하는 프로그램에서 주석처리가 가능한것은
    단지 이 프로그램에서만 주석으로 처리한다는 것이다.
    
    --------------------------------------------------------
    
    오라클에서 주석 처리방법
    
        --
    를 사용해서 한줄 주석으로 처리한다.
    
----------------------------------------------------------------------------
    
    우리가 설치할 때  SID 를 정하는 부분이 있었다.
    
    오라클은 데이터베이스 내부에 
    사용자가 만들어지고
    사용자 내부에 다시 데이터를 저장할 수 있는 테이블들이 만들어진다.
    
    이때 데이터베이스를 한개만 만들 수 있는것은 아니다.
    
    따라서 데이터베이스가 여러개 존재한다면
    각 데이터베이스를 구분을 해줘야 하겠다.
    
    이때 데이터베이스를 구분할 목적으로 
    데이터베이스마다 id를 정해주는데
    그 아이디가 
        SID 
    이다.
    
    우리는 
        SID - orcl
        관리자 비밀번호 - increpas
-------------------------------------------------------------------------------
    
    오라클은 프로그램이 아니므로 
    편집기등의 명령을 전달할 방식이 없다.
    
    따라서 사용자의 편의를 위해서
    여러 회사에서 편집기를 제공하고 있다.
    이것을 사용해서 명령을 전달하면 되겠다.
    ==> 이때 사용하는 편집 프로그램을 
            "오라클 게이트 프로그램"
        이라고 부르고
        오라클에서 제공하는 게이트 프로그램은
        sqlplus(CLI 환경), sqldeveloper(GUI 환경)
        이 있다.
        
        Toad for oracle
        이라는 프로그램 역시 같은 기능의 프로그램이다.
*/

/*
    오라클이란?
        데이터베이스 관리 시스템의 한 종류로
        많은 양의 데이터를 보관하고 있다가
        요청이 오면 필요한 데이터를 알려주는 도구이다.
        
        따라서 스스로 뭔가를 하는 것 보다는
        누군가의 요청을 받아서 
        그 요청에 해당하는 작업(데이터)를 처리하는 도구이다.
        
        
    용어 정리 ]
        
        DBMS        - 데이터베이스 관리 시스템
        Data Bank   - 데이터를 보관한느 장소를 관리하는 도구
        
        참고 ]
            흔히 좋은 데이터베이스, 성이 좋다 나쁘다...
            라는 표현은
            DBMS의 기능에 따라서 구분되어지는 것이다.
            따라서 데이터베이스프로그램마다 DBMS가 다르다는 말이고
            
            결론적으로
                데이터베이스를 조작하는 명령이 DBMS에 따라 달라진다.
*/

/*
    SQL 명령의 종류
        
        1. DDL 
            - 개체를 만들고 수정하고 삭제하는 명령
            1) CREATE
            2) ALTER
            3) DROP, TRUNCATE
            
        2. DML - CRUD
            - 데이터베이스를 조작하는 명령
            1) SELECT
            2) INSERT
            3) UPDATE
            4) DELETE
        
        3. DCL
            - 데이터베이스를 제어하는 명령
            1) TCL- 작업단위를 관리하는 명령
                - COMMIT, ROLLBACK, SAVEPOINT,...
            
            2) 권한에 관련된 명령
                - GRANT     : 권한을 부여하는 명령
                - REVOKE    : 권한을 회수하는 명령
    
    
    CRUD 란?
    ==> 데이터를 조작하는 명령들의 약자...
        C   -   새로운 데이터를 만드는 명령 - INSERT
        R   -   현재 데이터를 알아내는 명령 - SELECT
        U   -   데이터를 수정하는 명령        - UPDATE
        D   -   데이터를 삭제하는 명령        - DELETE
        
-------------------------------------------------------------------------------
RDBMS (관계형 데이터베이스 시스템) 에서 데이를 보관하는 방법
    테이블(ENTITY) 단위로 데이터를 보관한다.
    --> 테이블이란
        엑셀처럼
        줄과 칸으로 구성되어 데이터를 보관하는 방식
        
        따라서 테이블이란
        필드와 레코드로 구성된 데이터를 보관하는 작은 단위
            
            필드 - 같은 속성의 데이터 모임(칸) - COLUMN <-- ATTRIBUTE(속성)
            레코드 - 같은 목적을 가진 데이터의 모임 (행) - ROW <-- INSTANCE
            
        참고 ]
            필드에는 그 항목을 구분하기 위한 이름이 부여되어 있다.
            이것을 우리는 "필드이름"이라고 부른다.
            하지만 레코드는 각 줄을 구분하는 방법이 존재하지 않는다.
        
*/

/*
    접속한 계정내의 테블을 확인하는 방법
        형식 ]
            
            SELECT tname FROM tab;
            
    참고 ]
        오라클은 명령을 내릴때 대소문자를 전혀 구분하지 않는다.
        
        다만
        가독성 등의 이유때문에 
        기본 명령은 대문자로하고 필드이름, 테이블이름은 소문자로
        나머지는 대문자로 사용할 예정이다.
*/

SELECT
    tname
FROM
    tab
;

/*
    특정 테이블의 필드를 확인하는 명령
        
        형식 ]
            
            DESC 테이블이름;
*/

DESC emp;
--------------------------------------------------------------------------------
/*
    SELECT 명령
    ==> 테이블이 가지고 있는 내용(데이터)을 확인하는 명령
        만약
        자바 프로그램이 이 명령을 내리면
        오라클은 명령에 해당하는 데이터를 자바 프로그램에게 알려준다.
        
        형식 ]
            
            SELECT [DISTINCT] 필드이름, 필드이름, 필드이름, .... FROM 테이블이름 [옵션명령];
            
        의미 ]
            지정한 테이블이 가지고 있는 지정한 필드들의 데이터를 알려주는 명령
            
        예 ]
            EMP 테이블이 가지고있는 사원이름(ename)을 알려주세요.
            
            SELECT ename FROM emp;
            
    참고 ]
        sqlplus에서만 사용할 수 있는 slqplus명령들은 세미콜론을 붙이지 않아도 된다.
        
        명령 ]
            
            set pagesize 출력개수; --> 한페이지에 보여줄 데이터(row)의 갯수
            
            set linesize 데이터수; --> 한 행에 나타나는 데이터의 수를 조절하는 명령
            
        참고 ]
            sqlplus 명령은 종료하면 초기화된다.
        
*/
-- EMP 테이블이 가지고있는 사원이름(ename)을 알려주세요.
            
SELECT 
    ename 
FROM 
    emp;
    
-- emp 테이블에서 사원이름(ename), 직급(job)을 알고 싶다.
SELECT
    ename, job
FROM
    emp
;

/*
    같은 데이터가 중복되어서 나오는 것을 방지하고자 할때 사용하는 명령
        
        DISTINCT
        
    참고 ]
        DISTINCT 는 SELECT 절에 한번만 기술 할 수 있다.
        그리고 필드가 여러개이면 그들의 내용이 모두 동일한 경우에만 중복 처리를 한다.
        
        예 ]
            SELECT 
                DISTINCT sal, DISTINCT job
            FROM
                emp
            ;----------------------------------------- X
    
*/

SELECT
    DISTINCT job, ename -- select 절
FROM
    emp                 -- from 절이라고 부른다.
;

SELECT * FROM EMP;

INSERT INTO emp 
VALUES(
    (SELECT NVL(MAX(empno)+1, 7000) FROM emp) ,
    'SMITH', 'CLERK',	7902,	'2020/02/17',	800,	null,	20
);

SELECT * FROM emp;

SELECT
    DISTINCT job, ename
FROM
    emp
;

rollback;

SELECT * FROM emp;

SELECT
    DISTINCT job, ename
FROM
    emp
;

-- emp 테이블에서 부서별(deptno) 직책을 알아보고 싶다.
-- 어떤 부서에 어떤 직책이 있는지 알아보고 싶다.

SELECT
    DISTINCT job, deptno
FROM
    emp
;

/*
    조회된 결과를 정렬하는 방법
    
    형식 ]
        
        SELECT
            필드들...
        FROM
            테이블 이름
        ORDER BY
            필드이름 [ASC] | DESC
            -- ASC : 오름차순 정렬
            -- DESC : 내림차순 정렬
        ;
*/

SELECT
    DISTINCT job, deptno
FROM
    emp
ORDER BY
    deptno ASC, job DESC
;

/*
    원칙적으로 데이터를 조회할 때는
    조회할 내용이 있는 필드이름을 나열해서 확인하는 것이 원칙이다.
    간혹 모든 정보(모든 필드)을 보고 싶은 경우에는
    필드이름들 대신 " * " 기호를 사용해서 기술할 수도 있다.
    
    참고 ]
        실무에서는 * 를 사용하는 것을 권장하지 않는다.
        왜냐하면 * 기호를 사용하면 dbms는 데이터를 출력할 때마다
        그 테이블이 가지고 있는 필드이름을 찾아서
        필드이름이 가지고 있는 데이터를 찾아내게 된다.
        ==> 실무에서는 데이터의 수가 엄청나게 많으므로
            무척 느려지게 된다.
            
        따라서 모든 필드를 보고 싶으면
        필드이름을 모두 하나씩 나열해서 처리해야 한다.
        
*/

SELECT * FROM emp;

DESC emp;

INSERT INTO
    emp(empno, ename)
VALUES(
    5000, '둘리'
);

select * from emp;
rollback;

/*
    참고 ]
        질의명령안에는 
        연산식을 포함하라 수 있으며
        연산식이 포함되면 연산된 결과가 출력된다.
*/

SELECT
    empno, ename, sal, sal + 100, 2 * 4
FROM
    emp
;

SELECT
    2 * 4 -- 연산식의 결과는 데이터의 갯수만큼 출력된다.
FROM
    emp
;

/*
    NULL 데이터
        ==> 필드안에는 데이터가 보관되어야 하지만
            간혹 아직 데이터가 결정이 안된 경우도 발생할 수 있다.
            이처럼 필드안에 데이터가 없는 상태를 
            NULL 이라고 부른다.
            
        **
        문제점 ]
            NULL 데이터는 모든 연산에서 제외된다.
            
        ==> 
        해결방법 ]
            NULL은 데이터가 아직 결정이 나지 않은 상태이므로
            임시로 일시적으로 특정값으로 대체해서 계산을 한다.
            이 기능을 해주는 함수가
                NVL(컬럼이름, 대체값)
            함수이다.
            
            다시 말해서
            null 데이터는 모든 연산에서 제외되므로
            null 데이터를 연산작업중에만
            강제로 특정 데이터로 바꿔서 계산하는 명령이다.
            ==> 특정데이터로 교체했으니 연산이 될 것이다.
*/

-- 모든 사원들의 커미션에 500을 추가하세요.
SELECT 
    ename, comm, comm + 500
FROM
    emp
;

-- 모든 사원들의 사원이름, 커미션, 커미션에 500을 추가한 커미션 을 조회하세요.
-- 만약 커미션이 정해지지 않은 사원은 50에 500을 더한 값으로 조회되게 하세요.

SELECT 
    ename, comm, NVL(comm, 50) + 500
FROM
    emp
;

-- 모든 사원들의 사원이름, 커미션, 커미션에 500을 추가한 커미션 을 조회하세요.
-- 만약 커미션이 정해지지 않은 사원은 50에 300을 더한 값으로 조회되게 하세요.

SELECT 
    ename, comm, NVL(comm + 500, 50 + 300)
FROM
    emp
;

--------------------------------------------------------------------------------


INSERT INTO
    emp(empno, ename)
VALUES(
    5000, '둘리'
);

select * from emp;

/*
    참고
        문자열 결합 연산자 - 
            자바에서는 + 기호를 사용해서 문자열을 결합했지만
            오라클에서는 + 기호를 사용하면 절대로 안되고
            || 기호를 사용해서 두 문자열을 결합 할 수 있다.
            
    참고 ]
        오라클에서 문자와 문자열은 구분을 하지않고 사용한다.
        문자열을 표현할 때 사용하는 기호는 작은따옴표('')를 사용한다.
*/

-- 사원번호와 사원이름, 직급을 조회하세요.
-- 직급이 없는 사원은 '신입사원' 으로 출력되게 하세요.
SELECT
    empno, ename, NVL(job, '신입사원'), NVL(deptno, 00)
FROM
    emp
;

rollback;
-- 사원번호와 사원이름, 직급을 조회하세요.
-- 사원이름은 'oooooo 사원' 으로 출력되게 하고
-- 직급이 없는 사원은 '신입사원' 으로 출력되게 하세요.
/*
    || - 데이터 결합 연산자
*/

SELECT
    empno, ename || ' 사원', NVL(job, '신입사원')
FROM
    emp
;

/*
    필드이름 변경하기
        질의 명령을 실행하면 첫 행은 필드이름이 출력되게 된다.
        그런데 위의 예제 처럼 필드의 이름이 복잡해지는 경우도 발생한다.
        이런경우 필드의 이름을 바꿔야 될 필요가 생긴다.
        
        1. 그냥 바꾸는 방법
            
            형식 ]
                
                SELECT
                    연산식 또는 필드이름     새로운이름, ... 
                FROM
                    테이블이름
                ;
                
                예 ]
                    SELECT empno 사원번호, ename 사원이름 FROM emp;
              
        2. AS 를 이용해서 바꾸는 방법(권장)
            형식 ]
                SELECT
                    연산식 또는 필드이름   AS  새로운이름, ... 
                FROM
                    테이블이름
                ;
              예 ]
                    SELECT empno AS 사원번호, ename AS 사원이름 FROM emp;
                
                주의 ]
                    위의 새로운이름은 공백을 포함하면 안된다.
                    
                    공백이 별칭에 포함된 경우에는 큰따옴표로 별칭을 감싸주면 된다.
                    
                    예 ]
                        SELECT empno "사원 번호", ename "사원 이름" FROM emp;
*/

SELECT
    empno "사원 번호", (ename || ' 사원') "사원 이름", NVL(job, '신입사원') "사원직급"
FROM
    emp
;

SELECT empno AS 사원번호, ename AS "사원 이름" FROM emp;

/*
    조건에 맞는 데이터만 조회하기
        
        형식 ]
            SELECT
                필드이름, ...
            FROM
                테이블이름
            WHERE
                조건식
            ;
            ==> 조건식에 맞는 데이터만 추출해서 출력한다.
            
        조건식은 자바와 마찬가지로 관계연산자, 논리 연산자를 이용해서 
        질문을 만들 수 있다.
        
        관계연산자
            =           - 같다.
            <>, !=      - 다르다.
            대소비교는 자바와 동일...
            
        논리연산자
            AND
            OR
*/

-- 사원중 부서번호가 10번인 사원들의 
-- 사원번호, 사원이름, 급여, 부서번호를 별칭을 줘서 출력하세요.
/*
    emp 테이블
    ==> 이 테이블은 오라클이 학습용으로 제공하는 셈플 테이블이다.
        이 테이블에는 사원의 정보를 저장한다.
        필드는
            empno   ------------- 사원번호
            ename   ------------- 사원이름
            job     ------------- 사원직급
            mgr     ------------- 상사번호
            hiredate    --------- 입사일
            sal         --------- 급여
            comm        --------- 커미션
            deptno      --------- 부서번호
*/
SELECT
    empno 사원번호, ename 사원이름, sal "급    여", deptno 부서번호
FROM
    emp
WHERE
    deptno = 10
;

SELECT
    사원번호, 사원이름, 상사이름
FROM
    (SELECT
        e.empno 사원번호, (e.ename || ' 사원') 사원이름, 
        e.mgr 상사번호, ee.empno 상사사원번호, ee.ename 상사이름
    FROM
        emp e, emp ee
    WHERE
        e.mgr = ee.empno)
;


-- 사원중 부서번호가 10번이고 급여가 2000 이상인 사원들의 
-- 사원번호, 사원이름, 급여, 부서번호를 별칭을 줘서 출력하세요.

SELECT
    empno 사원번호, ename 사원이름, sal "급    여", deptno 부서번호
FROM
    emp
WHERE
    deptno = 10
    AND sal >= 2000
;

/*
    오라클은 데이터의 형태를 매우 중요시 한다.
    원칙적으로 문자는 문자끼만 비교할 수 있고 숫자는 숫자끼리만 비교할 수 있다.
    단, 예외가 있는데
        날짜데이터는 문자처럼 비교할 수 있다.
        ==> 이 경우는 데이터 형변환 함수가 자동 호출이 되서 
            그 결과를 가지고 비교하게 된다.
    
*/

-- 90년대 이후 입사한 사원의 사원번호, 사원이름, 입사일을 조회하세요.
SELECT
    empno, ename, hiredate
FROM
    emp
WHERE
    hiredate >= '1982/01/01'
--    <== hiredate >= to_date('1982/01/01', 'yyyy/mm/dd') 의 형식으로 형변환 함수가 자동 호출되어서 처리된다.
;

/*
    오라클은 문자열도 크다, 작다의 비교가 가능하다.
    이때 ascii 코드값을 이용해서 비교를 하게 된다.
    즉, 'a' < 'b'
    
    참고 ]
        오라클은 문자와 문자열을 구분하지 않는다.
        모두 같은 타입으로 처리한다.
        표현은 '' 를 사용해서 표현한다.
*/

-- 급여가 1500 이상인 사원의 이름, 직책, 급여를 조회하세요. 단, 별칭으로 표현되게 하세요.
SELECT
    ename 이름, job 직책, sal 급여
FROM
    emp
WHERE
    sal >= 1500
;

-- 사원이름이 M이후의 문자로 시작하는 사원의 사원번호, 사원이름, 사원직급을 조회하세요.
-- 단, 별칭으로 출력되게 하세요.
SELECT
    empno 사원번호, ename 사원이름, job 사원직급
FROM
    emp
WHERE
    ename >= 'N'
--    ename > 'MZZZZZZZZZZZZZZZZZZZZZZ'
    -- 'M' < 'MA'
;

/*
    NOT 연산자
    ==> 조건식의 결과를 부정하는 연산자
        
        형식 ]
            
            SELECT
                필드이름
            FROM
                테이블이름
            WHERE
                NOT     조건식
            ;
*/

-- 부서번호가 10번이 아닌 사원의 이름, 직급, 부서번호를 조회하세요.
SELECT
    ename 이름, job 직급, deptno 부서번호
FROM
    emp
WHERE
--    NOT deptno = 10
    deptno <> 10 -- != 도 사용가능
;