day15

다형성
- 하나의 변수를 이용하여 여러 형태의 클래스를 사용하도록 하는 기법
	단, 상속 관계에 있는 클래스에 한하여 하는 이야기
	
	주소의 형변환 ( Casting)
	- 원칙적으로 주소는 다른 형태로 형 변환이 불가능하다.
	즉, 주소는 Heap 형태에 따라 주소가 결정이 되므로
	Heap 형태가 다르면 주소를 기억할 수 없다.
	
		int[] no = new float[10]; ------------- X
		
		그러나 딱 한 가지 경우에 한해서 주소의 형 변환이 가능하다.
		상속관계에 있는 클래스 끼리는 형변환이 가능하다.
		
		is a 관계
		
			자동 형변환
				하위 클래스의 주소(하위 클래스의 인스턴스를 만들었을 때)가
				상위 클래스의 변수에 기억되는 것은
				자동적으로 형변환을 해준다
			
			강제 형변환
				상위 클래스의 주소가 하위 클래스 변수에 기억되는 것은
				원칙적으로 불가능
				강제로 형변환 해줄 수는 있다.
				
		다형성이란?
		
			주소의 형변환 이론을 기반으로 하여
			상위 클래스의 주소를 이용해서 하위 클래스를 이용할 수 있으며
			이 말은
			상위 클래스의 주소를 이용하면
			여러 하위 클래스를 다룰 수 있다.
			
		개발자 입장에서 다형성이란
			상위 클래스의 변수를 이용하면 하위 클래스를 사용할 수 있다.
			따라서 상위 클래스의 변수를 이용해서 하위 클래스를 받아서 사용하면 된다.
			
--------------------------------------------------------------------------------------

추상클래스 (Abstract Class)

	- 추상 함수를 0개 이상 가지고 있는 클래스
		따라서 추상 함수가 없어도 강제로 추상 클래스를 만들 수 있고
		추상 함수가 한 개라도 있으면 반드시 추상클래스로 만들어야 한다.
	
	추상 함수란?
		
		- 함수의 몸체(블럭 {})가 없는 함수를 말한다.
			즉, 기능이 없는 함수, 아직 정해지지 않은 함수
			
			- 이 함수는 C언어에서의 가상 함수에 해당하는 것이다.
			
		- 추상 클래스를 만드는 이유
	
			- 다형성을 구현하기 위함
	   
	추상 클래스 사용 방법
	
		- 추상 클래스는 스스로 new 시킬 수 없다.
			그 안에 기능이 없는 함수가 존재할 수 있으므로
		
		사용방법
		
			1. 다른 클래스에서 상속을 해준 후,
				추상 함수의 기능을 구현(오버라이드)하여 사용
				- 실무에서 이렇게 사용하는 경우 - 10% 미만
			
			2. 추상 클래스 안에는 속성이 static 이고 반환타입이 자기 자신인 함수가 있으면
				그 함수를 호출해서 사용하면 됨
				
				- AbstractClassEx ace = AbstractClassEx.getIntstance();
				
				- public class AbstractClassEx {
					
					public static AbstractClassEx ace = null;
					
					public static AbstractClassEx getInstance() {
						ace = new AbstractClassEx();
						return ace;
					}
				
				}
				
		참고 )
		
			추상클래스가 아님에도 불구하고
			생성자 함수가 존재하지 않는 클래스가 있다.
			이 클래스는 생성자 함수가 없는 것이 아니고
			생성자 함수를 private으로 감춰놓은 것으로
			역시 new 시켜서 사용할 수 없음.
			
			이러한 클래스 역시
				속성이 static이고
				반환값이 자기자신인
			함수를 이용해서 처리해주면 된다.
			
--------------------------------------------------------------------

인터페이스

	- 클래스의 한 종류이지만
		약간 그 형태나 의미가 다른 특수한 클래스
		
		1. 최상위 클래스가 Object가 아니다
			- 즉, 인터페이스는 다른 클래스를 상속받아 만들어진 클래스가 아님
		
		2. 내부에 100% 추상 함수가 존재해야 한다
			- 절대로 일반 함수는 존재하지 않는다
				- 기능을 가진 함수가 존재하면 안된다
		
		3. 인터페이스는 다른 클래스에 상속시킬 수 있는데
			다중 상속이 가능하다
		
		4. 변수는 가질 수 있다
			이 변수는 묵시적으로
			public static final 변수가 된다
		
		5. 인터페이스 소속 함수는 묵시적으로 public 함수가 된다
		
	왜 인터페이스를 만들어뒀나?
		- 가끔은 JVM에 의해서 자동 호출되어야 하는 함수가 필요하다
		
	인터페이스 사용하기
	
		1. 인터페이스는 스스로 new 되지 못함
			- 몸체가 없는 함수가 존재
			
			- 일반 클래스에 상속하여 구현
		
		2. 드문 경우로 반환값이 인터페이스 타입이면서 속성이 static인 함수가 다른 클래스에 있는 경우가 있다.
			이때 그 함수를 호출해서 객체를 만들어 사용하면 됨
		
		참고 )
		
			클래스는 단일 상속, 인터페이스는 다중 구현 가능
		
	참고 )
	
		인터페이스 내부에도 일반 함수가 올 수 있다.
		이 경우는 반드시 함수의 속성을 default라고 명시해야 한다
		
		형식 )
			
			default 반환타입 함수이름(매개변수 리스트) {
				함수 내용
			}