#day11

객체지향언어 (Object Orient Programming: OOP)
-> 객체를 이용해서 프로그램을 만들어 나가는 언어

클래스란?
	-> 하나의 목적을 달성하기 위해서 필요한 기능을 모아놓은 프로그램의 가장 작은 단위
	
	예 )
	
		문자열 관리 -> String
		네트워크 작업 -> Socket
		많은 양의 데이터를 한꺼번에 관리 -> Collections
	
	따라서 클래스를 이루는 구성 요소(멤버)는
		1. 변수 : 필요한 데이터를 기억(보관)하고 있어야 한다.
		2. 함수 : 어떤 문제를 해결하기 위한 기능이 있어야 한다.
		
-------------------------------------------------------------

	클래스를 만드는 방법
	
		[접근지정자] [속성] class 클래스이름 {
		
			변수 선언;
			
			함수 선언() {
			}
		
		}
		
----------------------------------------------------------------

문제는 이 클래스는 설계도에 불과하다.
즉, 클래스만 가지고 있다고 하여 이것이 실행되는 것은 아니다.
반드시 클래스가 실행 가능한 물건으로 탄생되어야 한다. (-> 메모리에 데이터가 기억되어야 한다.)

이처럼 클래스를 실행가능한 물건으로 만든 것을 "Object(객체)"라고 표현한다.

결론 )

	객체지향 언어는
	클래스를 기반으로 만들어진 Object를 가지고
	만들어지는 프로그래밍 언어
	
쉽게 정의하면 )

	-> 설계도는 이미 엄청나게 많이 준비되어 있다. (클래스)
		이것들을 적절한 위치에 조립해서
		목적하는 프로그램을 만들어나가는 기법

---------------------------------------------------------------------

객체를 만드는 방법
-> 객체는 JVM이 만들어 준다.
	개발자는 필요한 부품을 만들어 달라고 명령만 내리면 된다.
	
	클래스이름 변수;
	변수 = new 클래스이름();
		또는
	변수 = new 클래스이름(데이터);
	
	예 )
		Test라는 클래스가 존재한다면...
			Test t; 
				// 변수 선언. 이 변수는 레퍼런스 변수가 된다. 이 변수의 Heap Type은 Test 타입이 된다.
			t = new Test();
				// new 명령을 통해서 클래스가 Object가 되는데
				// 컴퓨터가 물건을 만든다는 개념
				// -> 메모리에 클래스를 올린다는 개념이 된다.
				
			둘을 합쳐 보면
			
			Test t		= 	new Test();
			Reference	+	Instance	 =	Object
			
			
		class Test {
			int a;
			float b;
			char c;
			
			int getA() {
				return a;
			}
			
			void setA(int a) {
				this.a = a;
			}
		}
		
		-> 사용할 때
		
		Test t;
		t = new Test();
		
		Test t = new Test();
		
		// 클래스의 내용이 모두 힙에 올려져 있고
		// 힙의 주소를 t가 기억하고 있으므로
		// t에 접근하면 Test 클래스의 내용을 사용할 수 있게 된다.
		
		t.getA(); -> 0
		t.setA(20);
		t.getA(); -> 20
		t1.getA(); -> 0
		
-----------------------------------------------------------------------------

객체의 사용 방법
-> 객체