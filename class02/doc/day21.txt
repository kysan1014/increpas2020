# day21
	
	2. ArrayList
		==> Vector의 신버젼으로
			역시 배열 형태로 데이터를 관리하기 때문에
			Vector의 특징을 그대로 가지게 된다.
			하지만 스레드에서 동기화 처리를 자동으로 해줌으로
			요사이는 Vector 보다는 ArrayList를 선호하는 경향이 있다.
			
		사용방법은 Vector와 유사하다.
		
		참고 ]
			list 계열의 주소를 출력하면
			마치 데이터가 나온것 처럼 보이지만
			이것은 toString() 를 오버라이딩 해 놓아서 출력만 될 뿐이다.
			절대로 데이터를 사용할 때는 반드시 하나씩 꺼내서 사용하도록 해야 한다.
			
	3. LinkedList
		==> 내부적으로 이중 연결 리스트 방식으로 데이터를 보관하는 방식의 컬렉션의 일종
			
			장점 ]
				데이터를 중간에 끼워넣기 작업, 삭제 작업은 속도가 빠르다.
				
			단점 ]
				데이터를 누적 시키는 작업은 속도가 느리다.
				
			주로 데이터의 변화가 심한 경우에 많이 사용되는 컬렉션...
			
			
------------------------------------------------------------------------------------------------------------------------
Collections 클래스
==> 이 클래스는 이름은 컬렉션이지만 컬렉션의 기능은 가지지 않고
	컬렉션을 이용할 때 필요한 부가적인 기능을 제공하는 유틸리티 클래스이다.
	
	주의 ]
		List를 달라고 하면 List계열을 주면 된다. <== 자동 형변환이 되니까....
		Set을 달라고 하면 Set 계열을 주면 된다.
		Collection을 달라고 하면 List, Set 계열의 데이터를 주면 된다.
		Map의 경우는 상위 클래스가 다르므로 같이 처리하는 것은 불가능하고
		Map을 달라고 하면 Map계열을 주면된다.
		
	참고 함수 ]
		
		Collections.sort() - 컬렉션을 정렬해주는 함수
		
		참고 ]
			만약 정렬방식을 변경하고자 하면
			sort(List list, Comparator c) 를 사용해야 한다. 